name: Payment Service - CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY: payment-service-api
  EKS_CLUSTER_NAME: fcg-identity
  SAM_S3_BUCKET: ${{ secrets.SAM_S3_BUCKET }}

jobs:
  build-and-test:
    name: Build and Test Payment Service
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore TechChallengeFIAP.Payment.sln

    - name: Build
      run: dotnet build TechChallengeFIAP.Payment.sln --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

  deploy-api:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure Kubectl for EKS
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Substituir placeholder da imagem no deployment
          sed -i 's|208452488125.dkr.ecr.sa-east-1.amazonaws.com/payment-service-api:latest|${{ steps.build-image.outputs.image }}|g' k8s/deployment.yaml
          
          # Aplicar manifests em ordem
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/newrelic-secrets.yaml
          kubectl apply -f k8s/kong-plugins.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Verify Deployment
        run: |
          echo "üöÄ Verificando status do deploy..."
          
          # Aguardar deployment estar pronto (mais confi√°vel que pods individuais)
          echo "‚è≥ Aguardando Payment API Deployment..."
          kubectl rollout status deployment/payment-api -n tech-challenge-payment --timeout=300s
          
          # Verificar se pelo menos 1 pod est√° ready
          echo "üîç Verificando pods prontos..."
          kubectl wait --for=condition=ready pod -l app=payment-api -n tech-challenge-payment --timeout=60s || echo "‚ö†Ô∏è Nem todos os pods est√£o prontos, mas continuando..."
          
          # Verificar status final
          echo "üìä Status dos recursos:"
          kubectl get pods -n tech-challenge-payment -o wide
          kubectl get svc -n tech-challenge-payment
          kubectl get ingress -n tech-challenge-payment
          
          # Verificar logs se houver problemas
          echo "üìù Verificando logs da API:"
          kubectl logs -l app=payment-api -n tech-challenge-payment --tail=10 || true
          
          echo "‚úÖ Deploy da API conclu√≠do com sucesso!"
      
  deploy-lambda-processor:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        
      - name: Ensure UTF-8 encoding
        run: |
          iconv -f ISO-8859-1 -t UTF-8 PaymentService.Processor/template.yml -o PaymentService.Processor/template.yml
          
      - name: Build Lambda package
        run: sam build --template PaymentService.Processor/template.yml
      
      - name: Deploy Lambda with SAM
        run: |
          sam deploy \
            --template .aws-sam/build/template.yaml \
            --stack-name payment-service-stack \
            --s3-bucket ${{ env.SAM_S3_BUCKET }} \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-confirm-changeset \
            --parameter-overrides \
              ParameterKey=RdsHost,ParameterValue=${{ secrets.RDS_HOST }} \
              ParameterKey=RdsPassword,ParameterValue=${{ secrets.RDS_PASSWORD }} \
              ParameterKey=SnsTopicArn,ParameterValue=${{ secrets.SNS_TOPIC_ARN }} \
              ParameterKey=WalletQueueArn,ParameterValue=${{ secrets.WALLET_QUEUE_ARN }} \
              ParameterKey=PurchaseQueueArn,ParameterValue=${{ secrets.PURCHASE_QUEUE_ARN }} \
              ParameterKey=ReplyQueueName,ParameterValue=${{ secrets.REPLY_QUEUE_NAME }} \
              ParameterKey=ElasticUrl,ParameterValue=${{ secrets.ELASTIC_URL }} \
              ParameterKey=ElasticId,ParameterValue=${{ secrets.ELASTIC_ID }} \
              ParameterKey=ElasticApiKey,ParameterValue=${{ secrets.ELASTIC_API_KEY }}
        
          echo "üöÄ Lambda Payment Processor deploy conclu√≠do!"
